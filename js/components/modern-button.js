// Modern Button Component for MindPattern Mental Health App
// This would typically be generated by the Magic MCP server

class ModernButton extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.render();
  }

  static get observedAttributes() {
    return ['variant', 'size', 'disabled'];
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      this.render();
    }
  }

  render() {
    const variant = this.getAttribute('variant') || 'primary';
    const size = this.getAttribute('size') || 'medium';
    const disabled = this.hasAttribute('disabled');
    
    this.shadowRoot.innerHTML = `
      <style>
        :host {
          display: inline-block;
          --primary-gradient: linear-gradient(135deg, #5B8AF9, #8B5FE6);
          --secondary-gradient: linear-gradient(135deg, #4FC3F7, #56CCF2);
          --disabled-color: #E0E0E0;
          --font-family: 'Inter', 'Poppins', sans-serif;
          --shadow-color: rgba(75, 105, 253, 0.3);
          
          /* Size variables */
          --padding-small: 8px 16px;
          --padding-medium: 12px 24px;
          --padding-large: 16px 32px;
          --font-small: 14px;
          --font-medium: 16px;
          --font-large: 18px;
          --radius: 12px;
        }
        
        .button {
          font-family: var(--font-family);
          border: none;
          border-radius: var(--radius);
          cursor: pointer;
          font-weight: 600;
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
          display: inline-flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          box-shadow: 0 4px 12px var(--shadow-color);
        }
        
        .button:focus {
          outline: none;
          box-shadow: 0 0 0 3px rgba(91, 138, 249, 0.4);
        }
        
        .button--primary {
          background: var(--primary-gradient);
          color: white;
        }
        
        .button--secondary {
          background: var(--secondary-gradient);
          color: white;
        }
        
        .button--small {
          padding: var(--padding-small);
          font-size: var(--font-small);
        }
        
        .button--medium {
          padding: var(--padding-medium);
          font-size: var(--font-medium);
        }
        
        .button--large {
          padding: var(--padding-large);
          font-size: var(--font-large);
        }
        
        .button--disabled {
          background: var(--disabled-color);
          color: #888;
          cursor: not-allowed;
          box-shadow: none;
        }
        
        .button:not(.button--disabled):hover {
          transform: translateY(-2px);
          box-shadow: 0 6px 16px var(--shadow-color);
        }
        
        .button:not(.button--disabled):active {
          transform: translateY(0);
          box-shadow: 0 2px 8px var(--shadow-color);
        }
        
        /* Wave animation effect on click */
        .button .wave {
          position: absolute;
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background: rgba(255, 255, 255, 0.4);
          transform: scale(0);
          animation: wave 0.6s linear;
          pointer-events: none;
        }
        
        @keyframes wave {
          0% {
            transform: scale(0);
            opacity: 0.5;
          }
          100% {
            transform: scale(20);
            opacity: 0;
          }
        }
      </style>
      
      <button class="button button--${variant} button--${size} ${disabled ? 'button--disabled' : ''}" ${disabled ? 'disabled' : ''}>
        <slot></slot>
      </button>
    `;
    
    const button = this.shadowRoot.querySelector('.button');
    if (!disabled) {
      button.addEventListener('click', this.createRipple.bind(this));
    }
  }
  
  createRipple(e) {
    const button = this.shadowRoot.querySelector('.button');
    const ripple = document.createElement('span');
    ripple.classList.add('wave');
    
    const rect = button.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    ripple.style.left = `${x}px`;
    ripple.style.top = `${y}px`;
    
    button.appendChild(ripple);
    
    setTimeout(() => {
      ripple.remove();
    }, 600);
    
    // Dispatch a custom event
    this.dispatchEvent(new CustomEvent('button-click', {
      bubbles: true,
      composed: true
    }));
  }
}

// Define the custom element
customElements.define('modern-button', ModernButton);

// Example usage:
// <modern-button variant="primary" size="medium">Click Me</modern-button>
